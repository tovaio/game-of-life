{"version":3,"sources":["App.tsx","serviceWorker.ts","index.tsx"],"names":["offsets","mod","n","m","generateGrid","rows","i","push","Array","fill","App","useState","grid","setGrid","running","setRunning","runningRef","useRef","current","runSimulation","useCallback","oldGrid","newGrid","j","nNeighbors","forEach","oi","oj","ni","nj","setTimeout","onClick","oldRunning","style","display","gridTemplateColumns","map","row","val","key","produce","gridCopy","width","height","backgroundColor","undefined","border","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"4KAQMA,EAAU,CACd,EAAE,GAAI,GACN,EAAE,EAAG,GACL,EAAE,EAAG,GACL,CAAC,GAAI,GACL,CAAC,EAAG,GACJ,CAAC,EAAG,GACJ,CAAC,GAAI,GACL,CAAC,EAAG,GACJ,CAAC,EAAG,IAGAC,EAAM,SAACC,EAAWC,GACtB,OAASD,EAAIC,EAAKA,GAAKA,GAGnBC,EAAe,WAGnB,IAFA,IAAMC,EAAO,GAEJC,EAAI,EAAGA,EAxBJ,GAwBeA,IACzBD,EAAKE,KAAKC,MAxBA,IAwBaC,MAAK,IAG9B,OAAOJ,GAyFMK,EAtFO,WAAO,IAAD,EACAC,mBAASP,GADT,mBAClBQ,EADkB,KACZC,EADY,OAGMF,oBAAS,GAHf,mBAGlBG,EAHkB,KAGTC,EAHS,KAKpBC,EAAaC,iBAAOH,GAC1BE,EAAWE,QAAUJ,EAErB,IAAMK,EAAgBC,uBAAY,WAC3BJ,EAAWE,UAEhBL,GAAQ,SAAAQ,GAEN,IADA,IAAMC,EAAUlB,IADC,WAERE,GACP,IAHe,eAGNiB,GAEP,IAAIC,EAAa,EACjBxB,EAAQyB,SAAQ,YAAe,IAAD,mBAAZC,EAAY,KAARC,EAAQ,KAC5B,GAAW,IAAPD,GAAmB,IAAPC,EAAhB,CACA,IAAMC,EAAK3B,EAAIK,EAAIoB,EAlDjB,IAmDIG,EAAK5B,EAAIsB,EAAII,EAlDjB,IAmDFH,GAAeH,EAAQO,GAAIC,GAAO,EAAI,OAEnCR,EAAQf,GAAGiB,KAAsB,IAAfC,GAAmC,IAAfA,KACpCH,EAAQf,GAAGiB,IAAsB,IAAfC,KACvBF,EAAQhB,GAAGiB,IAAK,IAXXA,EAAI,EAAGA,EA5CV,GA4CqBA,IAAM,EAAxBA,IADFjB,EAAI,EAAGA,EA5CR,GA4CmBA,IAAM,EAAxBA,GAgBT,OAAOgB,KAETQ,WAAWX,EA3DE,OA4DZ,IAEH,OACE,oCACE,4BACEY,QAAS,WACPhB,GAAW,SAAAiB,GAKT,OAJKA,IACHhB,EAAWE,SAAU,EACrBC,MAEMa,OAIXlB,EAAU,QAAU,UAEvB,4BACEiB,QAAS,WACPlB,EAAQT,OAFZ,UAOA,yBACE6B,MAAO,CACLC,QAAS,OACTC,oBAAoB,UAAD,OAzFf,GAyFe,aAxFZ,GAwFY,SAGpBvB,EAAKwB,KAAI,SAACC,EAAK/B,GAAN,OACR+B,EAAID,KAAI,SAACE,EAAKf,GAAN,OACN,yBACEgB,IAAG,UAAKjC,EAAL,YAAUiB,GACbQ,QAAS,WACP,IAAMT,EAAUkB,YAAQ5B,GAAM,SAAA6B,GAC5BA,EAASnC,GAAGiB,IAAMe,KAEpBzB,EAAQS,IAEVW,MAAO,CACLS,MAtGC,GAuGDC,OAvGC,GAwGDC,gBAAiBN,EAAM,aAAUO,EACjCC,OAAQ,6BClGJC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCbNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SDoI3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,iB","file":"static/js/main.251d375c.chunk.js","sourcesContent":["import React, { useState, useCallback, useRef } from 'react';\nimport produce from 'immer';\n\nconst nRows = 25;\nconst nCols = 50;\nconst cellSize = 15;\nconst tickTime = 16;\n\nconst offsets = [\n  [-1, -1],\n  [-1, 0],\n  [-1, 1],\n  [0, -1],\n  [0, 0],\n  [0, 1],\n  [1, -1],\n  [1, 0],\n  [1, 1],\n];\n\nconst mod = (n: number, m: number): number => {\n  return ((n % m) + m) % m;\n};\n\nconst generateGrid = () => {\n  const rows = [];\n\n  for (let i = 0; i < nRows; i++) {\n    rows.push(Array(nCols).fill(false));\n  }  \n  \n  return rows;\n}\n\nconst App: React.FC = () => {\n  const [ grid, setGrid ] = useState(generateGrid);\n\n  const [ running, setRunning ] = useState(false);\n\n  const runningRef = useRef(running);\n  runningRef.current = running;\n\n  const runSimulation = useCallback(() => {\n    if (!runningRef.current) return;\n    // simulate\n    setGrid(oldGrid => {\n      const newGrid = generateGrid();\n      for (let i = 0; i < nRows; i++) {\n        for (let j = 0; j < nCols; j++) {\n          // count neighbors\n          let nNeighbors = 0;\n          offsets.forEach(([oi, oj]) => {\n            if (oi === 0 && oj === 0) return;\n            const ni = mod(i + oi, nRows);\n            const nj = mod(j + oj, nCols);\n            nNeighbors += (oldGrid[ni][nj]) ? 1 : 0;\n          }); \n          if ((oldGrid[i][j] && (nNeighbors === 2 || nNeighbors === 3))\n            || (!oldGrid[i][j] && (nNeighbors === 3))) {\n            newGrid[i][j] = true;\n          }\n        }\n      }\n      return newGrid;\n    });\n    setTimeout(runSimulation, tickTime);\n  }, []);\n\n  return (\n    <>\n      <button\n        onClick={() => {\n          setRunning(oldRunning => {\n            if (!oldRunning) {\n              runningRef.current = true;\n              runSimulation();\n            }\n            return !oldRunning;\n          });\n        }}\n      >\n        {running ? 'Stop!' : 'Start!'}\n      </button>\n      <button\n        onClick={() => {\n          setGrid(generateGrid());\n        }}\n      >\n        Clear!\n      </button>\n      <div\n        style={{\n          display: 'grid',\n          gridTemplateColumns: `repeat(${nCols}, ${cellSize}px)`\n        }}\n      >\n        {grid.map((row, i) => \n          row.map((val, j) => (\n            <div \n              key={`${i}-${j}`}\n              onClick={() => {\n                const newGrid = produce(grid, gridCopy => {\n                  gridCopy[i][j] = !val;\n                });\n                setGrid(newGrid);\n              }}\n              style={{\n                width: cellSize,\n                height: cellSize, \n                backgroundColor: val ? 'black' : undefined,\n                border: 'solid 1px grey'\n              }}\n            />\n          ))\n        )}\n      </div>\n    </>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}